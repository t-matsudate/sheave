searchState.loadedDescShard("sheave_core", 0, "The stream buffer for encoding/decoding chunk data.\nDecodes bytes into a chunk data. This can return errors …\nEncodes a chunk data into bytes.\nAn error that buffer has been empty during decoding chunks.\nDecodes bytes into a ConnectResult command.\nDecodes bytes into a CreateStream command.\nDecodes bytes into a PeerBandwidth message.\nDecodes bytes into a FcUnpublish command.\nDecodes bytes into a DeleteStream command.\nDecodes bytes into an OnFcPublish command.\nDecodes bytes into a VideoTag.\nDecodes bytes into a ReleaseStreamResult command.\nDecodes bytes into a ReleaseStream command.\nDecodes bytes into a FcPublish command.\nDecodes bytes into a ChunkSize.\nDecodes bytes into a Connect command.\nDecodes bytes into an ECMA array.\nDecodes bytes into an AMF’s Null.\nDecodes bytes into an AMF’s Object type.\nDecodes bytes into a Acknowledgement message.\nDecodes bytes into an WindowAcknowledgementSize message.\nDecodes bytes into a AudioTagHeader.\nDecodes bytes into an AMF’s Boolean.\nDecodes bytes into an AMF’s Number.\nDecodes bytes into a AudioTag.\nDecodes bytes into a SetDataFrame message.\nDecodes bytes into an OnStatus command.\nDecodes bytes into a StreamBegin event.\nDecodes bytes into a VideoTagHeader.\nDecodes bytes into a ScriptDataTag.\nDecodes bytes into a Publish command.\nDecodes bytes into a CreateStreamResult command.\nDecodes bytes into an AMF’s String.\nConstructs an ECMA array.\nEncodes an AMF’s Boolean into bytes.\nEncodes a ReleaseStream command into bytes.\nEncodes a VideoTag into bytes.\nEncodes a ReleaseStreamResult command into bytes.\nEncodes a FcPublish command into bytes.\nEncodes a ScriptDataTag into bytes.\nEncodes an OnFcPublish command into bytes. However this …\nEncodes a VideoTagHeader into bytes.\nEncodes a CreateSteam command into bytes.\nEncodes a CreateStreamResult command into bytes.\nEncodes a Publish command into bytes.\nEncodes a StreamBegin event into bytes.\nEncodes an OnStatus command into bytes.\nEncodes a SetDataFrame message into bytes.\nEncodes a Acknowledgement message into bytes.\nEncodes an WindowAcknowledgementSize message into bytes.\nEncodes a PeerBandwidth message into bytes.\nEncodes a Connect command into bytes.\nEncodes a FcUnpublish command into bytes.\nEncodes an ECMA array into bytes.\nEncodes an AMF String into bytes.\nEncodes a ConnectResult command into bytes.\nEncodes a DeleteStream command into bytes.\nEncodes a AudioTagHeader into bytes.\nEncodes an AMF’s Null into bytes.\nEncodes an AMF’s Object into bytes.\nEncodes a AudioTag into bytes.\nEncodes an AMF’s Number into bytes.\nEncodes a ChunkSize into bytes.\nThe FLV File Format\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries getting arbitrary bytes from buffer.\nTries getting 8 bytes from buffer, as a 64 bits floating …\nTries getting <strong>signed</strong> 3 bytes from buffer, as the big …\nTries getting 2 bytes from buffer, as the big endian.\nTries getting 3 bytes from buffer, as the big endian.\nTries getting 4 bytes from buffer, as the big endian.\nTries getting 1 byte from buffer.\nHandling RTMP connections and data streaming.\nTypes for the handshake step in RTMP.\nA utility function of constructing an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe RTMP Messages\nConstructs this error.\nConstructs an AMF’s Object.\nPeeks 1 byte from buffer. This keeps buffer’s current …\nPuts arbitrary bytes into buffer.\nPuts 8 bytes into buffer, as a 64 bits floating point …\nPuts <strong>signed</strong> 3 bytes into buffer, as the big endian.\nPuts 2 bytes into buffer, as the big endian.\nPuts 3 bytes into buffer, as the big endian.\nPuts 4 bytes into buffer, as the big endian.\nPuts 1 byte into buffer.\nComputes remained length in this buffer.\nPatterns of the FilterName field. Currently, FilterName …\nThe FLV container. This holds just 2 elements:\nAppends a FLV tag into the tag container. This reuses the …\nConstructs an empty FLV container from a name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current FLV version.\nChecks whether FLV container has audio data.\nChecks whether FLV container has video data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads a FLV tag from the playpath. Note this can return …\nConstructs a FLV container from a file.\nThe FLV tags\nThe audio data format.\nThe header of the AudioTag.\nPacket types of the AVC codec.\nRepresentation of the CodecID field.\nThe Message ID which is written into FLV metadata (however …\nThe FLV tag element.\nRepresentation of the FrameType field.\nThe length of metadata which are common to every FLV tag.\nThe meta data which consists of a name-value pair.\nRepresentation of the SoundFormat field of the AudioTag.\nRepresentation of the SoundRate field.\nRepresentation of TagType bits of the FLV tag.\nThe video data format.\nThe header of the VideoTag.\nReturns the argument unchanged.\nConverts a SoundFormat field into a variant.\nConverts a SoundRate field into a variant.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a message data.\nGets the name of this metadata.\nGets the tag type.\nGets the timestamp.\nGets the value of this metadata.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheckes whether this codec is the AVC.\nConsturcts a AudioTagHeader.\nConstructs a AudioTag.\nConstructs a VideoTagHeader.\nConstructs a VideoTag.\nConstructs a ScriptDataTag.\nConstructs a FlvTag.\nThe interface for handling RTMP connection steps with …\nThe extension methods for handlers.\nThe interface for providing the way to construct any …\nTells that either digests or signatures are inconsistent …\nThe chunk information which is sent/received last.\nMeasurement receiving chunk size.\nRTMP’s common contexts.\nAn error that stream has no data to write. Note this is …\nThe wrapper for stream types.\nThe simple stream for std’s buffer-like types.\nAdds received chunk size to current one.\nWraps current chunk size into an <code>Acknowledgement</code> message.\nWraps current chunk size into an <code>Acknowledgement</code> message.\nResets measured count and turns the flag into on, for …\nChains this handler with <code>next</code>.\nResets measured count and turns the flag into off, for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the <code>app</code> name. Note this can return <code>None</code>. e.g. When …\nGets a duration for awaiting of receiving some message.\nGets a client-side handshake bytes. Note this can return …\nGets a client-side handshake bytes as mutable. Note:\nGets a command object sent from a client. Note this can …\nGets current chunk size.\nGets specieifed algorithm to encrypt this handshake. Note …\nGets a information object of a server. Note this can …\nGets input file/device. Note this can return <code>None</code>. e.g. …\nGets input file/device as mutable. Note this can return …\nLoads a last received chunk. If no last chunk is stored …\nLoads a last received chunk as mutable. If no last chunk …\nLoads a last sent chunk. If no last chunk is stored …\nLoads a last sent chunk as mutable. If no last chunk is …\nGets a message ID.\nGets a message ID of this stream. Note this can return <code>None</code>…\nGets a message length.\nGets a message type.\nGets the peer bandwidth.\nGets a <code>playpath</code> (e.g. filename) sent from a client. Note …\nGets a properties object of a server. Note this can return …\nGets one of status to mean which a publication client is …\nGets a publishing name of this stream. Note this can …\nGets a publishing type of this stream. Note this can …\nGets a chunking size which reads from streams.\nGets a chunkign size which writes into stream.\nGets a server-side handshake bytes. Note this can return …\nGets the <code>tcUrl</code>. Note this can return <code>None</code>. e.g. this field …\nGets a timestamp.\nGets a transaction ID sent.\nGets the window acknowledgement size.\nA utility function for wrapping the error <code>InconsistentSha</code> …\nIncreases current transaction ID. Mainly, this is used by …\nStores a last received chunk.\nStores a last sent chunk.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the handshake is signed.\nGets a mutable reference via this wrapped by <code>Arc</code>. Sheave …\nMakes this stream into <em>pinned</em> weak pointer.\nHandles some error when previous handler returns <code>Err</code>.\nConstructs a LastChunk. Note the message ID is set 0 when …\nConstructs this error.\nConstructs a wrapped stream.\nWraps a stream to make it able to measure the amount of …\nResets a message ID from this context. This is prepared …\nResets a <code>playpath</code> from this context. This is prepared for …\nSets the <code>app</code> name. This can be contained in a request URI …\nSets a duration for awaiting of receiving some message.\nStores a cleint-side handshake bytes.\nSets a command object sent from a client.\nStores the algorithm to encrypt this handshake.\nSets a information object of a server.\nSets input file/device.\nSets a message ID.\nSets a message ID of this stream.\nSets a message length.\nSets a message type.\nSets the peer bandwidth.\nSets a <code>playpath</code> (e.g. filename) sent from a client.\nSets a properties object of a server.\nSets one of status to mean which a publication client is …\nSets a publishing name of this stream.\nSets a publishing type of this stream.\nSets a chunking size which reads from streams.\nSets a chunking size which writes into streams.\nStores a server-side handshake bytes.\nStores a flag to mean this handshake is signed.\nSets the <code>tcUrl</code>. This is a full URL in the RTMP request …\nSets a timestamp.\nSets a transaction ID. Mainly, this is used by server side …\nSets the window acknowledgement size.\nA utility function of constructing an <code>StreamGotExhausted</code>\nLoops while the body returns <code>Ok(())</code> or <code>Pending</code>.\nWraps previous handlers into a middleware.\nThe key which is used to imprint ant client-side digest.\nThe key which is used to imprint any signature. Both sides …\nRepresentation of first 1 byte in handshake.\nThe 1536 bytes handshake data. This respectively consists …\nThe latest version of Flash Player.\nThe latest version of Flash Media Server.\nThe key which is used to imprint any server-side digest.\nBytes meant not to use HMAC-SHA256.\nBytes to indicate Flash Player version/Flash Media Server …\nChecks whether imprinted digest matches with one computed …\nChecks whether imprinted signature matches one computed by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets all handshake data.\nGets a digest contained in this handshake bytes. Note its …\nGets a number of major version either Flash Player or …\nGets a signature contained into this handshake bytes.\nGets first 4 bytes as timestamp.\nGets second 4 bytes as Flash Player version/Flash Media …\nImprints an HMAC-SHA256 digest into handshake data.\nImprints an HMAC-SHA256 signature into handshake data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs handshake data.\nThe message to tell that some message length has exceeded …\nThe IDs which are assigned every roles of chunks. This is …\nUniforms chunk data by a channel numbers and a message …\nTells a size to chunk its stream to the partner.\nThe command to tell the information that where connects …\nThe response message for Connect requests.\nThe command to request emitting a message ID to a server.\nThe response message for CreateStream requests.\nThe command to request to delete its message ID.\nThe IDs which are types of user control messages.\nThe command to tell the playpath. Typically, this becomes …\nThis command is same as <code>FcPublish</code> except this requests to …\nAn error means that some command name differs you expect.\nAn error means that some event type differs you expect.\nAn error that some publishing type differs you expect.\nAn error that some chunk size is negative.\nThe response message for FcPublish requests.\nThe response message for Publish requests.\nThe message to tell the client-side bandwidth. This has 2 …\nThe command to tell publishing information.\nAn error that publishing has failed by something cause.\nThe command to tell the Play Path (e.g. something file …\nThe response message for ReleaseStream requests.\nThe message to handle something data.\nThe event to tell that the stream is ready to a client.\nUniforms user control messages by an event type.\nThe message to tell the server-side bandwidth. Almost RTMP …\nThe Action Message Formats\nConstructs a ChunkSize with its default value. In RTMP, …\nConstructs an WindowAcknowledgementSize message with the …\nConstructs a PeerBandwidth message with the default …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets an internal value.\nGets the command object in this request.\nGets the info object.\nGets the information object.\nGets the message ID which is assigned to this stream.\nGets the message ID which this event has.\nGets the message ID.\nGets the Play Path.\nGets the playpath.\nGets the playpath.\nGets the properties object.\nGets the publishing identifier. (e.g. filename, username, …\nGets one of publishing type which is either <code>&quot;live&quot;</code>, …\nThe Chunk Headers\nA utility function of constructing an <code>InconsistentCommand</code> …\nA utility function of constructing an <code>InconsistentEventType</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA utility function of constructing an <code>InvalidPublishingType</code>…\nA utility function of constructing a <code>NegativeChunkSize</code> …\nConstructs this error.\nConstructs a Connect command.\nConstructs this error.\nConstructs a chunk size.\nConstructs a ConnectResult command.\nConstructs a ReleaseStream command.\nConstructs a FcPublish command.\nConstructs a CreateStreamResult command.\nConstructs this error.\nConstructs a Publish command.\nConstructs this error.\nConstructs a StreamBegin event.\nConstructs this error.\nConstructs an OnStatus command.\nConstructs a new SetDataFrame message.\nConstucts a Acknowledgement message.\nConstructs an WindowAcknowledgementSize message.\nConstructs a PeerBandwidth message.\nConstructs a FcUnpublish command.\nConstructs a DeleteStream command.\nA utility function of constructing a <code>PublishingFailure</code> …\nAn error that some AMF type marker differes you expect.\nAn error that some string data is invalid for UTF-8.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA utility function of constructing an <code>InconsistentMarker</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA utility function of constructing an <code>InvalidString</code> error.\nConstructs this error.\nConstructs this error.\nThe AMF Data Types (version 0).\nThe UTF-8 string of AMF data types.\nThe boolean representation of AMF data types. This uses 1 …\nThe <strong>sized</strong> object type of AMF. This consists of:\nRepresentation of markers of the AMF data types.\nThe value to mean that has no content.\nThe IEEE 754 double precision floating point number of AMF …\nThe anonymous object type of AMF. This consists of pairs …\nGets an inner value as a boolean value.\nGets an inner value as an integer. This is prepared for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets immutable properties from this object.\nGets immutable properties from this array.\nGets mutable properties from this object.\nGets mutable properties from this array.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs an AMF’s Number.\nConstructs an AMF’s Boolean.\nConstructs an AMF’s String.\nConstrcuts a new object.\nConstructs a new ECMA array.\nIndicates the chunk stream and message header’s format. …\nThe first 2 bits to indicate a format of message header.\nIndicates a chunk datum format and which stream is it into.\nRepresentation of message type id byte of the Message …\nReturns the argument unchanged.\nConverts message format bits into a variant.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the chunk ID.\nGets the message format.\nGets a message ID. All but 11 bytes type returns <code>None</code>.\nGets a message length. 0 bytes type and 3 bytes type …\nGets a message type. 0 bytes type and 3 bytes type return …\nGets a timestamp. Only 0 bytes type returns <code>None</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new basic header.\nReader extensions for RTMP.\nMakes a stream awaiting until receiving some message.\nMakes a stream sleeping during specified duration.\nA stream for RTMP that wrapped Tokio’s <code>TcpStream</code>. If you …\nReads or writes from the socket using a user-provided IO …\nOpens a RTMP connection to a remote host. When connection …\nReturns the argument unchanged.\nCreates new RtmpStream from a <code>std::net::TcpStream</code>. When …\nCalls <code>U::from(self)</code>.\nSplits a TcpStream into a read half and a write half, …\nTurns a <code>sheave_core::net::rtmp::RtmpStream into </code>…\nReads the linger duration for this socket by getting the …\nReturns the local address that this stream is bound to. …\nGets the value of the TCP_NODELAY option on this socket. …\nReceives data on the socket from the remote address to …\nReturns the remote address that this stream is connected …\nAttempts to receive data on the socket, without removing …\nPolls for read readiness. Read more\nPolls for write readiness. Read more\nWaits for the socket to become readable. Read more\nWaits for any of the requested ready states. Read more\nSets the linger duration of this socket by setting the …\nSets the value of the TCP_NODELAY option on this socket. …\nSets the value for the IP_TTL option on this socket. Read …\nSplits a TcpStream into a read half and a write half, …\nReturns the value of the <code>SO_ERROR</code> option.\nTries to read or write from the socket using a …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to write several buffers to the stream, returning …\nTries to write several buffers to the stream, returning …\nGets the value of the IP_TTL option for this socket. Read …\nWaits for the socket to become writable. Read more\nReads a basic header from streams.\nReads a chunk data from streams.\nReads one byte to indicate the encryption algorithm from …\nReads an extended timestamp from streams.\nReads an actual handshake data from streams.\nReads a message header from streams.\nWrites a basic header into streams.\nA wrapper for writing a chunk into streams. The RTMP needs …\nWrites a chunk data into streams.\nWrites one byte to indicate the encryption algorithm into …\nWrites an extended timestramp into streams.\nWrites actual handshake data into streams.\nWrites a message header into streams.")